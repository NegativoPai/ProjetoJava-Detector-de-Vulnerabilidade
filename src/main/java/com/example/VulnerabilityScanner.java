package main.java.com.example;

import org.apache.hc.client5.http.fluent.Request;
import org.apache.hc.core5.http.ClassicHttpResponse;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityScanner{

    //Verificando headers de segurança da URL
    public static List<String> scanHttpHeaders(String url){
        List<String> vulnerabilities = new ArrayList<>();

        try{
            ClassicHttpResponse response = (ClassicHttpResponse) Request.get(url) .connectTimeout(5000) .response();
    //Verificando headers comuns
    if (response.getHeader("X-Content-Type-Options") == null){

        vulnerabilities.add("Header de segurança 'X-Content-Type-Options' ausente.");
    }
    if (response.getHeader("X-Frame-Options") == null){

    vulnerabilities.add("Header de segurança 'X-Frame-Options' ausente.");
    }
    if (response.getHeader("Content-Security-Policy") == null){

        vulnerabilities.add("Header de segurança 'Content-Security-Policy' ausente.");
    }
    if (response.getHeader("Strict-Transport-Security") == null){

    vulnerabilities.add("Header de segurança 'Strict-Transport-Security' ausente.");
        }
    } catch (IOException e){

    vulnerabilities.add("Erro ao verificar headers de segurança: " + e.getMessage());
    }

    return vulnerabilities;
    }

    //testar ports abertas em um IP
    public static List<Integer> scanOpenPorts(String ip){
        List<Integer> openPorts = new ArrayList<>();
        int[] portsToScan = {21, 22, 23, 80, 443, 8080};

        for (int port : portsToScan)
        {
            try (Socket socket = new Socket()) {
                socket.connect(new InetSocketAddress(ip, port), 2000);
                openPorts.add(port);
            } catch (IOException ignored) {
                //Port fechada
            }
        }

        return openPorts;
    }
}